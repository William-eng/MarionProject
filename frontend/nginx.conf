#user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;
# Define the worker connections
events {
    worker_connections 1024;
}

# HTTP block starts here
http {

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;



    # The server block should be here
    server {
        listen 80;
        listen       [::]:80;
        server_name liberttinnii.xyz;


        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://liberttinnii.xyz$request_uri;
         }

    server {
        listen 443 ssl;
        server_name liberttinnii.xyz ;

    # Redirect www to non-www
        if ($host = 'www.liberttinnii.xyz') {
            return 301 https://liberttinnii.xyz$request_uri;
     }

    # Add your SSL certificate and key paths here
        ssl_certificate /etc/letsencrypt/live/libertini.crt;
        ssl_certificate_key /etc/letsencrypt/live/libertini.key;



        #health check
        location /health {
        default_type text/html;
        return 200 "<!DOCTYPE html><p>Web Tier Health Check</p>\n";
        }

        # Serve the React frontend

        location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /index.html;
        }

        # Proxy /api to the FastAPI backend
        location /api {
            proxy_pass http://backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy /docs to the FastAPI Swagger documentation
        location /docs {
            proxy_pass http://backend:8000/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy /prometheus to the Prometheus web UI
        location /prometheus {
            proxy_pass http://prometheus:9090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy /grafana to the Grafana web UI
        location /grafana {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }



        server {
    listen 80;
    server_name db.liberttinnii.xyz www.db.liberttinnii.xyz;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://db.liberttinnii.xyz$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name db.liberttinnii.xyz www.db.liberttinnii.xyz;

    # Redirect www to non-www
    if ($host = 'www.db.cv1.drintech.online') {
        return 301 https://db.liberttinnii.xyz$request_uri;
    }

    # Add your SSL certificate and key paths here
        ssl_certificate /etc/letsencrypt/live/libertini.crt;
        ssl_certificate_key /etc/letsencrypt/live/libertini.key;

    location / {
        proxy_pass http://adminer:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        
        # Handle errors gracefully
        error_page 404 /index.html;
    }
}
